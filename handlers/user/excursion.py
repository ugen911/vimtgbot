from aiogram import Router, types, F
from config import ADMINS
from keyboards.main_menu import main_menu
import re
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

router = Router()

user_states = {}

skip_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

@router.message(F.text == "üìã –ó–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é")
async def start_excursion_form(message: types.Message):
    user_states[message.from_user.id] = {"step": "phone"}
    await message.answer("üìã –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message()
async def handle_excursion_form(message: types.Message):
    uid = message.from_user.id
    state = user_states.get(uid)

    if not state:
        return

    if state["step"] == "phone":
        phone = message.text.strip()
        if not is_valid_phone(phone):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n+7XXXXXXXXXX, 8XXXXXXXXXX –∏–ª–∏ 2XXXXXX")
            return
        state["phone"] = phone
        state["step"] = "name"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", reply_markup=skip_keyboard)

    elif state["step"] == "name":
        name = message.text.strip()
        state["name"] = name if name.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else "‚Äî"
        state["step"] = "comment"
        await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", reply_markup=skip_keyboard)

    elif state["step"] == "comment":
        comment = message.text.strip()
        state["comment"] = comment if comment.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else "‚Äî"
        await finish_excursion_form(message, state)
        del user_states[uid]

def is_valid_phone(phone: str) -> bool:
    phone = phone.replace(" ", "")
    return (
        re.fullmatch(r"(\+7|8)\d{10}", phone) or
        re.fullmatch(r"2\d{6}", phone)
    )

async def finish_excursion_form(message: types.Message, data: dict):
    name = data.get("name", "‚Äî")
    comment = data.get("comment", "‚Äî")
    phone = data["phone"]

    msg = (
        f"üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é</b>\n\n"
        f"‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"üë§ <b>–ò–º—è:</b> {name}\n"
        f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {comment}"
    )

    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=main_menu)

    # –†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin in ADMINS:
        try:
            await message.bot.send_message(admin, msg)
        except Exception:
            pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ
