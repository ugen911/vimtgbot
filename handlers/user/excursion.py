from aiogram import Router, types, F
from config import ADMINS
from keyboards.main_menu import main_menu, back_menu
import re
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router()

user_states = {}

# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —à–∞–≥–∞—Ö "–∏–º—è" –∏ "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
skip_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)


@router.message(F.text == "üìã –ó–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é")
async def start_excursion_form(message: types.Message):
    user_states[message.from_user.id] = {"step": "phone"}
    await message.answer(
        "üìã –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=back_menu,
    )


@router.message(F.text.in_(["üîô –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
async def cancel_form(message: types.Message):
    if message.from_user.id in user_states:
        del user_states[message.from_user.id]
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥:", reply_markup=main_menu)
    else:
        await message.answer("üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)


@router.message()
async def handle_excursion_form(message: types.Message):
    uid = message.from_user.id
    state = user_states.get(uid)

    if not state:
        return

    text = message.text.strip()

    # –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞, –æ—Ç–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É
    if text in [
        "üìö –£—Å–ª—É–≥–∏",
        "üì∞ –ê–Ω–æ–Ω—Å—ã",
        "üìã –ó–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é",
        "üåê –û–Ω–ª–∞–π–Ω —ç–∫—Å–∫—É—Ä—Å–∏—è",
        "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π",
        "üßë‚Äçüè´ –ü–µ–¥–∞–≥–æ–≥–∏",
        "üçé –ú–µ–Ω—é",
    ]:
        del user_states[uid]
        return

    if state["step"] == "phone":
        if not is_valid_phone(text):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n+7XXXXXXXXXX, 8XXXXXXXXXX –∏–ª–∏ 2XXXXXX",
                reply_markup=back_menu,
            )
            return
        state["phone"] = text
        state["step"] = "name"
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", reply_markup=skip_keyboard
        )

    elif state["step"] == "name":
        state["name"] = text if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else "‚Äî"
        state["step"] = "comment"
        await message.answer(
            "–û—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", reply_markup=skip_keyboard
        )

    elif state["step"] == "comment":
        state["comment"] = text if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else "‚Äî"
        await finish_excursion_form(message, state)
        del user_states[uid]

    else:
        del user_states[uid]
        await message.answer(
            "‚ö†Ô∏è –í–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é.", reply_markup=main_menu
        )


def is_valid_phone(phone: str) -> bool:
    phone = phone.replace(" ", "")
    return re.fullmatch(r"(\+7|8)\d{10}", phone) or re.fullmatch(r"2\d{6}", phone)


async def finish_excursion_form(message: types.Message, data: dict):
    name = data.get("name", "‚Äî")
    comment = data.get("comment", "‚Äî")
    phone = data["phone"]

    msg = (
        f"üìã <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é</b>\n\n"
        f"‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"üë§ <b>–ò–º—è:</b> {name}\n"
        f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {comment}"
    )

    await message.answer(
        "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=main_menu
    )

    for admin in ADMINS:
        try:
            await message.bot.send_message(admin, msg)
        except Exception:
            pass
