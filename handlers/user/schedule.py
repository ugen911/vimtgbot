import os
import json
from aiogram import Router, types, F
from config import DATA_DIR, MEDIA_DIR, SECTIONS
from keyboards.main_menu import back_menu
from filters.admin_mode_filter import AdminModeFilter, NotAdminModeFilter

router = Router()

SECTION_TITLE = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π"
SECTION_KEY = SECTIONS.get(SECTION_TITLE, "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ").strip()
JSON_PATH = os.path.join(DATA_DIR, f"{SECTION_KEY}.json")
MEDIA_PATH = os.path.join(MEDIA_DIR, SECTION_KEY)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ–≥–¥–∞ –Ω–µ –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ)
@router.message(NotAdminModeFilter(), F.text == SECTION_TITLE)
async def choose_group(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üë∂ –ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞")],
            [types.KeyboardButton(text="üßí –°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router.message(
    NotAdminModeFilter(), F.text.in_(["üë∂ –ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞", "üßí –°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞"])
)
async def show_schedule(message: types.Message):
    group_key = "–º–ª–∞–¥—à–∞—è" if "–ú–ª–∞–¥—à–∞—è" in message.text else "—Å—Ç–∞—Ä—à–∞—è"

    if not os.path.exists(JSON_PATH):
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", reply_markup=back_menu)
        return

    with open(JSON_PATH, encoding="utf-8") as f:
        data = json.load(f)

    blocks = data.get(group_key, [])
    if not isinstance(blocks, list):
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=back_menu
        )
        return

    for block in blocks:
        desc = block.get("desc", "")
        media_list = block.get("media", [])

        if media_list:
            for media_file in media_list:
                file_path = os.path.join(MEDIA_PATH, group_key, media_file)
                if os.path.exists(file_path):
                    if media_file.endswith(".mp4"):
                        await message.answer_video(
                            types.FSInputFile(file_path),
                            caption=desc,
                            parse_mode="HTML",
                        )
                    else:
                        await message.answer_photo(
                            types.FSInputFile(file_path),
                            caption=desc,
                            parse_mode="HTML",
                        )
                else:
                    await message.answer(
                        f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {media_file}\n{desc}",
                        reply_markup=back_menu,
                    )
        else:
            await message.answer(desc, reply_markup=back_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π –∏—Ö –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª
@router.message(AdminModeFilter(), F.text == SECTION_TITLE)
async def admin_schedule_redirect(message: types.Message):
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º...")
    await message.bot.send_message(message.chat.id, "/admin_schedule")
