import os
import json
from aiogram import Router, types, F
from config import DATA_DIR, MEDIA_DIR, SECTIONS
from keyboards.main_menu import back_menu
from handlers.user.state import user_states

router = Router()

SECTION_TITLE = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π"
SECTION_KEY = SECTIONS.get(
    SECTION_TITLE, "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
).strip()  # üëà –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–∞
JSON_PATH = os.path.join(DATA_DIR, f"{SECTION_KEY}.json")
MEDIA_PATH = os.path.join(MEDIA_DIR, SECTION_KEY)


@router.message(F.text == SECTION_TITLE)
async def choose_group(message: types.Message):
    user_states.pop(message.from_user.id, None)  # üëà —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üë∂ –ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞")],
            [types.KeyboardButton(text="üßí –°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)


@router.message(F.text.in_(["üë∂ –ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞", "üßí –°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞"]))
async def show_schedule(message: types.Message):
    group_key = "–º–ª–∞–¥—à–∞—è" if "–ú–ª–∞–¥—à–∞—è" in message.text else "—Å—Ç–∞—Ä—à–∞—è"

    if not os.path.exists(JSON_PATH):
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", reply_markup=back_menu)
        return

    with open(JSON_PATH, encoding="utf-8") as f:
        data = json.load(f)

    blocks = data.get(group_key, [])
    if not isinstance(blocks, list):
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=back_menu
        )
        return


    for i, block in enumerate(blocks):
        desc = block.get("desc", "")
        media_list = block.get("media", [])


        if media_list:
            for media_file in media_list:
                file_path = os.path.join(MEDIA_PATH, group_key, media_file)
                if os.path.exists(file_path):
                    if media_file.endswith(".mp4"):
                        await message.answer_video(
                            types.FSInputFile(file_path),
                            caption=desc,
                            parse_mode="HTML",
                        )
                    else:
                        await message.answer_photo(
                            types.FSInputFile(file_path),
                            caption=desc,
                            parse_mode="HTML",
                        )
                else:
                    await message.answer(
                        f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {media_file}\n{desc}",
                        reply_markup=back_menu,
                    )
        else:
            await message.answer(desc, reply_markup=back_menu)
