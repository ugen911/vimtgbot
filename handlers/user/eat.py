from aiogram import Router, F, types
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile,
)
import os
import json
from aiogram.utils.media_group import MediaGroupBuilder
from keyboards.main_menu import main_menu, back_menu
from filters.admin_mode_filter import NotAdminModeFilter

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üçΩ –ú–µ–Ω—é –¥–Ω—è")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
)


@router.message(NotAdminModeFilter(), F.text == "üçé –ú–µ–Ω—é")
async def show_menu(message: types.Message):
    try:
        with open("data/menu.json", encoding="utf-8") as f:
            data = json.load(f)
    except Exception:
        return await message.answer("üõ† –ú—ã –Ω–∞–¥ —ç—Ç–∏–º —Ä–∞–±–æ—Ç–∞–µ–º...", reply_markup=back_menu)

    menu_items = data.get("menu_items", [])
    if not isinstance(menu_items, list) or not menu_items:
        return await message.answer("üõ† –ú–µ–Ω—é –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", reply_markup=back_menu)

    for item in menu_items:
        name = item.get("name", "–ú–µ–Ω—é")
        description = item.get("description", "")
        media_list = item.get("media", [])

        files_exist = False
        album = MediaGroupBuilder()

        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –º–µ–¥–∏–∞
        for media_file in media_list:
            file_path = os.path.join(
                "media", "menu", media_file
            )  # üîß –µ—Å–ª–∏ media/–º–µ–Ω—é, –ø–æ–º–µ–Ω—è–π —Ç—É—Ç
            if not os.path.isfile(file_path):
                await message.answer(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {media_file}")
                continue

            files_exist = True
            if media_file.endswith(".mp4"):
                if os.path.getsize(file_path) <= 49 * 1024 * 1024:
                    album.add_video(FSInputFile(file_path))
            else:
                album.add_photo(FSInputFile(file_path))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
        if files_exist and album.build():
            try:
                await message.answer_media_group(album.build())
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞: {e}")
        elif files_exist:
            # fallback –ø–æ –æ–¥–Ω–æ–º—É
            for media_file in media_list:
                file_path = os.path.join("media", "menu", media_file)
                if not os.path.isfile(file_path):
                    continue
                if media_file.endswith(".mp4"):
                    await message.answer_video(FSInputFile(file_path))
                else:
                    await message.answer_photo(FSInputFile(file_path))
        else:
            await message.answer(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.", reply_markup=back_menu
            )

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞
        await message.answer(
            f"<b>{name}</b>\n{description}", parse_mode="HTML", reply_markup=back_menu
        )


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
