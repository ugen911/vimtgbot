from aiogram import Router, types, F
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile,
    InputMediaPhoto,
    InputMediaVideo,
)
import os
import json
from aiogram.utils.media_group import MediaGroupBuilder
from keyboards.main_menu import main_menu, back_menu
from filters.admin_mode_filter import NotAdminModeFilter

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ú–µ–Ω—é"
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üçΩ –ú–µ–Ω—é –¥–Ω—è")], [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
    resize_keyboard=True,
)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é" –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ–≥–¥–∞ –æ–Ω–∏ –Ω–µ –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ)
@router.message(NotAdminModeFilter(), F.text == "üçé –ú–µ–Ω—é")
async def show_menu(message: types.Message):
    try:
        with open("data/menu.json", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        return await message.answer("‚ùå –ú–µ–Ω—é –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", reply_markup=back_menu)

    menu_items = data.get("menu_items", [])

    for item in menu_items:
        name = item["name"]
        description = item["description"]
        media_list = item.get("media", [])

        message_text = f"<b>{name}</b>\n{description}"
        await message.answer(message_text, parse_mode="HTML", reply_markup=back_menu)

        if media_list:
            album = MediaGroupBuilder()
            for media_file in media_list:
                file_path = os.path.join("media", "–º–µ–Ω—é", media_file)
                if os.path.exists(file_path):
                    if media_file.endswith(".mp4"):
                        album.add_video(FSInputFile(file_path))
                    else:
                        album.add_photo(FSInputFile(file_path))
            built_album = album.build()
            if built_album:
                await message.answer_media_group(built_album)
            else:
                await message.answer("‚ö†Ô∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=back_menu)
        else:
            await message.answer("‚ùå –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=back_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è)
@router.message(F.content_type.in_(["photo", "video"]))
async def handle_media(message: types.Message):
    if message.photo:
        file_id = message.photo[-1].file_id
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        await message.answer(
            f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}", reply_markup=main_menu
        )

    elif message.video:
        file_id = message.video.file_id
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        await message.answer(
            f"–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ! –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}", reply_markup=main_menu
        )


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
