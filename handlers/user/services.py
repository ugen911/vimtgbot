import os
import json
from aiogram import Router, types, F
from aiogram.utils.media_group import MediaGroupBuilder
from config import DATA_DIR, MEDIA_DIR, SECTIONS
from keyboards.main_menu import main_menu, back_menu
from keyboards.services_menu import services_menu

router = Router()

SECTION_TITLE = "üìö –£—Å–ª—É–≥–∏"
SECTION_KEY = SECTIONS[SECTION_TITLE]
JSON_PATH = f"{DATA_DIR}/{SECTION_KEY}.json"
MEDIA_PATH = f"{MEDIA_DIR}/{SECTION_KEY}"

@router.message(F.text == "/start")
async def start(message: types.Message):
    await message.answer(
        "üè° <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥ \"–í–∏–º–º–µ–ª—å–±—É—Ö\"! üë∂</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_home(message: types.Message):
    await message.answer("üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

# –ù–∞–∑–∞–¥ ‚Äî —Ç–æ–∂–µ –≤–µ–¥—ë—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥:", reply_markup=main_menu)

# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "üìö –£—Å–ª—É–≥–∏" ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é
@router.message(F.text == SECTION_TITLE)
async def show_services_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=services_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
@router.message(F.text.in_([
    "üè´ –î–µ—Ç—Å–∫–∏–π —Å–∞–¥ –ø–æ–ª–Ω–æ–≥–æ –¥–Ω—è", "üó£ –õ–æ–≥–æ–ø–µ–¥", "üé§ –ó–∞–ø—É—Å–∫ —Ä–µ—á–∏",
    "üíÜ –õ–æ–≥–æ–º–∞—Å—Å–∞–∂", "üßò –ê—ç—Ä–æ–π–æ–≥–∞", "üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ",
    "üìö –°–∫–æ—Ä–æ—á—Ç–µ–Ω–∏–µ", "üé® –¢–≤–æ—Ä—á–µ—Å–∫–∞—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è", "üßÆ –ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞",
    "üë©‚Äçüëß –í–º–µ—Å—Ç–µ —Å –º–∞–º–æ–π", "üí™ –ö—Ä–µ–ø—ã—à –û–§–ü", "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è"
]))
async def show_service_detail(message: types.Message):
    service_name = message.text.strip()
    if not os.path.exists(JSON_PATH):
        await message.answer("‚ùå –£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=back_menu)
        return

    with open(JSON_PATH, encoding="utf-8") as f:
        items = json.load(f)

    service = next((item for item in items if item["title"] == service_name), None)

    if not service:
        await message.answer("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_menu)
        return

    text = f"<b>{service['title']}</b>\n{service['desc']}"
    media_files = service.get("media", [])

    if media_files:
        album = MediaGroupBuilder()
        for filename in media_files:
            full_path = os.path.join(MEDIA_PATH, filename)
            if filename.endswith(".mp4"):
                album.add_video(types.InputMediaVideo(media=types.FSInputFile(full_path)))
            else:
                album.add_photo(types.InputMediaPhoto(media=types.FSInputFile(full_path)))
        await message.answer_media_group(album.build())

    await message.answer(text, reply_markup=services_menu)
