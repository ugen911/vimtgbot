import os
import json
import logging
from aiogram import Router, types, F
from config import DATA_DIR, MEDIA_DIR, SECTIONS
from keyboards.main_menu import back_menu

router = Router()

SECTION_TITLE = "üåê –û–Ω–ª–∞–π–Ω —ç–∫—Å–∫—É—Ä—Å–∏—è"
SECTION_KEY = SECTIONS.get(SECTION_TITLE, "–æ–Ω–ª–∞–π–Ω—ç–∫—Å–∫—É—Ä—Å–∏–∏")
JSON_PATH = f"{DATA_DIR}/{SECTION_KEY}.json"
MEDIA_PATH = f"{MEDIA_DIR}/{SECTION_KEY}"

@router.message(F.text.lower().contains("–æ–Ω–ª–∞–π–Ω —ç–∫—Å–∫—É—Ä—Å–∏—è"))
async def show_online_tour(message: types.Message):
    logging.warning(f"[online_tour] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text!r}")

    if not os.path.exists(JSON_PATH):
        await message.answer("–û–Ω–ª–∞–π–Ω-—ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_menu)
        return

    try:
        with open(JSON_PATH, encoding="utf-8") as f:
            blocks = json.load(f)
    except Exception as e:
        logging.error(f"[online_tour] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é.", reply_markup=back_menu)
        return

    if not isinstance(blocks, list):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–∏.", reply_markup=back_menu)
        return

    for block in blocks:
        desc = block.get("desc", "")
        media_list = block.get("media", [])

        if media_list:
            for media_file in media_list:
                file_path = os.path.join(MEDIA_PATH, media_file)
                if os.path.exists(file_path):
                    if media_file.endswith(".mp4"):
                        await message.answer_video(
                            types.FSInputFile(file_path),
                            caption=desc,
                            parse_mode="HTML"
                        )
                    else:
                        await message.answer_photo(
                            types.FSInputFile(file_path),
                            caption=desc,
                            parse_mode="HTML"
                        )
                else:
                    await message.answer(
                        f"üïì –í–∏–¥–µ–æ <code>{media_file}</code> –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∑–∂–µ:\n\n{desc}",
                        parse_mode="HTML",
                        reply_markup=back_menu
                    )
        else:
            await message.answer(desc, reply_markup=back_menu)

# –í—Ä–µ–º–µ–Ω–Ω—ã–π fallback, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ)
@router.message()
async def debug_message(message: types.Message):
    logging.warning(f"[debug fallback] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text!r}")
