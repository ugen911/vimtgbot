import os
import json
from aiogram import Router, types, F
from config import DATA_DIR, MEDIA_DIR, SECTIONS
from keyboards.main_menu import back_menu

router = Router()

SECTION_TITLE = "üåê –û–Ω–ª–∞–π–Ω —ç–∫—Å–∫—É—Ä—Å–∏—è"
SECTION_KEY = SECTIONS[SECTION_TITLE].strip()
JSON_PATH = os.path.join(DATA_DIR, f"{SECTION_KEY}.json")
MEDIA_PATH = os.path.join(MEDIA_DIR, SECTION_KEY)

print("üì¶ –ú–æ–¥—É–ª—å online_tour.py –∑–∞–≥—Ä—É–∂–µ–Ω")
print("üëâ SECTION_TITLE:", repr(SECTION_TITLE))


@router.message(F.text == SECTION_TITLE)
async def show_online_tour(message: types.Message):
    print("‚úÖ –•–µ–Ω–¥–ª–µ—Ä show_online_tour —Å—Ä–∞–±–æ—Ç–∞–ª")

    if not os.path.exists(JSON_PATH):
        await message.answer(
            "–û–Ω–ª–∞–π–Ω-—ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=back_menu
        )
        return

    with open(JSON_PATH, encoding="utf-8") as f:
        blocks = json.load(f)

    if not isinstance(blocks, list):
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–∏.", reply_markup=back_menu
        )
        return

    print("üîç –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–ª–æ–∫–æ–≤:", len(blocks))

    for i, block in enumerate(blocks):
        desc = block.get("desc", "")
        media_list = block.get("media", [])

        print(f"\nüì¶ –ë–ª–æ–∫ {i + 1}")
        print("–û–ø–∏—Å–∞–Ω–∏–µ:", desc)
        print("–ú–µ–¥–∏–∞:", media_list)

        if media_list:
            for media_file in media_list:
                file_path = os.path.join(MEDIA_PATH, media_file)
                if os.path.exists(file_path):
                    print("‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª:", media_file)
                    if media_file.endswith(".mp4"):
                        await message.answer_video(
                            types.FSInputFile(file_path),
                            caption=desc,
                            parse_mode="HTML",
                        )
                    else:
                        await message.answer_photo(
                            types.FSInputFile(file_path),
                            caption=desc,
                            parse_mode="HTML",
                        )
                else:
                    print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:", file_path)
                    await message.answer(
                        f"‚ùå –í–∏–¥–µ–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∑–∂–µ:\n\n{desc}",
                        reply_markup=back_menu,
                    )
        else:
            print("‚ÑπÔ∏è –¢–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ, –±–µ–∑ –º–µ–¥–∏–∞.")
            await message.answer(desc, reply_markup=back_menu)
