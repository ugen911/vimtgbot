from aiogram import Router, types, F
import os
import json
from keyboards.main_menu import main_menu, back_menu
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router()

pedagogues_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë©‚Äçüè´ –í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏")],
        [KeyboardButton(text="üéì –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ–¥–∞–≥–æ–≥–∏" ‚Äî –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
@router.message(F.text == "üßë‚Äçüè´ –ü–µ–¥–∞–≥–æ–≥–∏")
async def show_pedagogues_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=pedagogues_menu)


@router.message(F.text == "üë©‚Äçüè´ –í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏")
async def show_vospitately(message: types.Message):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è—Ö –∏–∑ JSON
    with open("data/pedagogues.json", encoding="utf-8") as f:
        data = json.load(f)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è—Ö
    vospitately = data.get("–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è
    for vospitately_info in vospitately:
        name = vospitately_info["name"]
        role = vospitately_info["role"]
        description = vospitately_info["description"]
        media_list = vospitately_info.get("media", [])

        message_text = f"<b>{name}</b>\n{role}\n{description}"
        await message.answer(message_text, parse_mode="HTML", reply_markup=back_menu)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)
        if not media_list:
            await message.answer("‚ùå –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=back_menu)
        else:
            for media_file in media_list:
                file_path = os.path.join("media", "–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏", media_file)
                if os.path.exists(file_path):
                    if media_file.endswith(".mp4"):
                        await message.answer_video(types.FSInputFile(file_path))
                    else:
                        await message.answer_photo(types.FSInputFile(file_path))
                else:
                    await message.answer(
                        f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {media_file}", reply_markup=back_menu
                    )


@router.message(F.text == "üéì –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
async def show_prepodavateli(message: types.Message):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö –∏–∑ JSON
    with open("data/pedagogues.json", encoding="utf-8") as f:
        data = json.load(f)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
    prepodavateli = data.get("–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    for prepodavatel_info in prepodavateli:
        name = prepodavatel_info["name"]
        role = prepodavatel_info["role"]
        description = prepodavatel_info["description"]
        media_list = prepodavatel_info.get("media", [])

        message_text = f"<b>{name}</b>\n{role}\n{description}"
        await message.answer(message_text, parse_mode="HTML", reply_markup=back_menu)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)
        if not media_list:
            await message.answer("‚ùå –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=back_menu)
        else:
            for media_file in media_list:
                file_path = os.path.join("media", "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", media_file)
                if os.path.exists(file_path):
                    if media_file.endswith(".mp4"):
                        await message.answer_video(types.FSInputFile(file_path))
                    else:
                        await message.answer_photo(types.FSInputFile(file_path))
                else:
                    await message.answer(
                        f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {media_file}", reply_markup=back_menu
                    )


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
