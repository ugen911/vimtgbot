from aiogram import Router, types, F
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.media_group import MediaGroupBuilder
import os
import json
from keyboards.main_menu import main_menu, back_menu
from filters.admin_mode_filter import NotAdminModeFilter

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ü–µ–¥–∞–≥–æ–≥–∏"
pedagogues_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë©‚Äçüè´ –í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏")],
        [KeyboardButton(text="üéì –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
)


@router.message(NotAdminModeFilter(), F.text == "üßë‚Äçüè´ –ü–µ–¥–∞–≥–æ–≥–∏")
async def show_pedagogues_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=pedagogues_menu)


async def send_pedagogues_list(
    message: types.Message, role_key: str, media_folder: str
):
    try:
        with open("data/pedagogues.json", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        return await message.answer(
            "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–µ–¥–∞–≥–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=back_menu
        )

    items = data.get(role_key, [])
    if not items:
        return await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=back_menu)

    for index, item in enumerate(items):
        name = item.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        role = item.get("role", "–†–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        description = item.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        media_list = item.get("media", [])

        text = f"<b>{name}</b>\n<b>{role}</b>\n{description}"
        await message.answer(text, parse_mode="HTML", reply_markup=back_menu)

        if media_list:
            album = MediaGroupBuilder()
            for file in media_list:
                file_path = os.path.join("media", media_folder, file)
                if not os.path.exists(file_path):
                    await message.answer(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}")
                    continue
                if file.endswith(".mp4"):
                    album.add_video(FSInputFile(file_path))
                else:
                    album.add_photo(FSInputFile(file_path))

            built_album = album.build()
            if built_album:
                try:
                    await message.answer_media_group(built_album)
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
        else:
            await message.answer("‚ùå –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=back_menu)


@router.message(NotAdminModeFilter(), F.text == "üë©‚Äçüè´ –í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏")
async def show_vospitately(message: types.Message):
    await send_pedagogues_list(
        message, role_key="–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏", media_folder="–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏"
    )


@router.message(NotAdminModeFilter(), F.text == "üéì –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
async def show_prepodavateli(message: types.Message):
    await send_pedagogues_list(
        message, role_key="–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", media_folder="–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"
    )


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
