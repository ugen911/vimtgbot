from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os
from config import DATA_DIR, MEDIA_DIR, ADMINS
from handlers.admin.base_crud import load_json, save_json, save_media_file
from filters.is_admin import IsAdmin
from keyboards.main_menu import back_menu

router = Router()
router.message.filter(IsAdmin())

JSON_PATH = os.path.join(DATA_DIR, "menu.json")
MEDIA_PATH = os.path.join(MEDIA_DIR, "–º–µ–Ω—é")


class EditMenu(StatesGroup):
    waiting_for_desc = State()
    choosing_media_action = State()
    deleting_media = State()
    adding_media = State()
    deleting_menu_block = State()


class AddMenu(StatesGroup):
    waiting_for_desc = State()
    waiting_for_media = State()


@router.message(F.text == "/admin_menu")
async def menu_admin_menu(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    await state.clear()
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—é")],
            [types.KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é")],
            [types.KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—é")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
    )
    await message.answer("üçΩ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=keyboard)


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—é")
async def start_add_menu(message: types.Message, state: FSMContext):
    await state.set_state(AddMenu.waiting_for_desc)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –º–µ–Ω—é:", reply_markup=back_menu)


@router.message(AddMenu.waiting_for_desc)
async def add_menu_desc(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text.strip())
    await state.set_state(AddMenu.waiting_for_media)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'", reply_markup=back_menu
    )


@router.message(AddMenu.waiting_for_media, F.content_type.in_(["photo", "video"]))
async def add_menu_media(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id if message.photo else message.video.file_id
    is_video = bool(message.video)
    filename = await save_media_file(message.bot, file_id, MEDIA_PATH, is_video)
    data = await state.get_data()
    media_list = data.get("media", [])
    media_list.append(filename)
    await state.update_data(media=media_list)
    await message.answer("üìé –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ï—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'")


@router.message(AddMenu.waiting_for_media, F.text.lower() == "–≥–æ—Ç–æ–≤–æ")
async def finish_add_menu(message: types.Message, state: FSMContext):
    data = await state.get_data()
    block = {
        "name": "–ú–µ–Ω—é",
        "description": data["desc"],
        "media": data.get("media", []),
    }
    menu = load_json(JSON_PATH)
    if "menu_items" not in menu:
        menu["menu_items"] = []
    menu["menu_items"].append(block)
    save_json(JSON_PATH, menu)
    await state.clear()
    await message.answer("‚úÖ –ë–ª–æ–∫ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω")


@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é")
async def edit_menu_desc(message: types.Message, state: FSMContext):
    await state.set_state(EditMenu.waiting_for_desc)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=back_menu,
    )


@router.message(EditMenu.waiting_for_desc)
async def edit_menu_description(message: types.Message, state: FSMContext):
    text = message.text.strip()
    data = load_json(JSON_PATH)
    if data.get("menu_items"):
        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            data["menu_items"][0]["description"] = text
            save_json(JSON_PATH, data)
    await state.set_state(EditMenu.choosing_media_action)
    await message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏?",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [
                    types.KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞"),
                    types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞"),
                ],
                [types.KeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å")],
            ],
            resize_keyboard=True,
        ),
    )


@router.message(EditMenu.choosing_media_action, F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞")
async def delete_existing_media(message: types.Message, state: FSMContext):
    data = load_json(JSON_PATH)
    if not data.get("menu_items") or not data["menu_items"][0].get("media"):
        return await message.answer("–ù–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    media_list = data["menu_items"][0]["media"]
    for idx, file in enumerate(media_list, 1):
        full_path = os.path.join(MEDIA_PATH, file)
        if os.path.exists(full_path):
            if file.endswith(".mp4"):
                await message.answer_video(
                    types.FSInputFile(full_path), caption=f"{idx}. {file}"
                )
            else:
                await message.answer_photo(
                    types.FSInputFile(full_path), caption=f"{idx}. {file}"
                )

    await state.set_state(EditMenu.deleting_media)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–µ–¥–∏–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
    )


@router.message(EditMenu.deleting_media)
async def process_media_deletion(message: types.Message, state: FSMContext):
    text = message.text.strip()
    data = load_json(JSON_PATH)
    if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.set_state(EditMenu.choosing_media_action)
        return await message.answer("–û–∫. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=back_menu)

    try:
        indexes = [int(i.strip()) - 1 for i in text.split(",")]
    except ValueError:
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")

    media = data["menu_items"][0].get("media", [])
    media_to_keep = []
    for i, file in enumerate(media):
        if i not in indexes:
            media_to_keep.append(file)
        else:
            try:
                os.remove(os.path.join(MEDIA_PATH, file))
            except FileNotFoundError:
                pass

    data["menu_items"][0]["media"] = media_to_keep
    save_json(JSON_PATH, data)
    await state.set_state(EditMenu.choosing_media_action)
    await message.answer(
        "üóë –£–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω—ã. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=back_menu
    )


@router.message(EditMenu.choosing_media_action, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞")
async def start_adding_media(message: types.Message, state: FSMContext):
    await state.set_state(EditMenu.adding_media)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'")


@router.message(EditMenu.adding_media, F.content_type.in_(["photo", "video"]))
async def add_new_menu_media(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id if message.photo else message.video.file_id
    is_video = bool(message.video)
    filename = await save_media_file(message.bot, file_id, MEDIA_PATH, is_video)
    data = load_json(JSON_PATH)
    if data.get("menu_items"):
        data["menu_items"][0].setdefault("media", []).append(filename)
        save_json(JSON_PATH, data)
    await message.answer("üìé –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'")


@router.message(EditMenu.adding_media, F.text.lower() == "–≥–æ—Ç–æ–≤–æ")
@router.message(EditMenu.choosing_media_action, F.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def finish_menu_editing(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úÖ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ")


@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—é")
async def choose_menu_block_for_deletion(message: types.Message, state: FSMContext):
    data = load_json(JSON_PATH)
    items = data.get("menu_items", [])
    if not items:
        return await message.answer("–ú–µ–Ω—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=item["name"])] for item in items]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await state.set_state(EditMenu.deleting_menu_block)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.message(EditMenu.deleting_menu_block)
async def delete_menu_block_by_name(message: types.Message, state: FSMContext):
    title = message.text.strip()
    data = load_json(JSON_PATH)
    blocks = data.get("menu_items", [])

    new_blocks = []
    found = False

    for block in blocks:
        if block["name"] == title:
            for file in block.get("media", []):
                try:
                    os.remove(os.path.join(MEDIA_PATH, file))
                except FileNotFoundError:
                    pass
            found = True
        else:
            new_blocks.append(block)

    if not found:
        return await message.answer("‚ùå –ú–µ–Ω—é —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    data["menu_items"] = new_blocks
    save_json(JSON_PATH, data)

    await state.clear()
    await message.answer(f"üóë –ë–ª–æ–∫ –º–µ–Ω—é '{title}' —É–¥–∞–ª—ë–Ω.", reply_markup=back_menu)
