from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
import os
from config import DATA_DIR, MEDIA_DIR, SECTIONS
from handlers.admin.base_crud import load_json, save_json, save_media_file
from keyboards.main_menu import back_menu
from .services_admin_states import EditService, ManageService, DeleteService

router = Router()

SECTION_TITLE = "üìö –£—Å–ª—É–≥–∏"
SECTION_KEY = SECTIONS[SECTION_TITLE]
JSON_PATH = os.path.join(DATA_DIR, f"{SECTION_KEY}.json")
MEDIA_PATH = os.path.join(MEDIA_DIR, SECTION_KEY)


@router.message(ManageService.choosing_action, F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É")
async def start_edit_service(message: types.Message, state: FSMContext):
    services = load_json(JSON_PATH)
    if not services:
        return await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç.")

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=item["title"])] for item in services]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await state.set_state(EditService.waiting_for_choice)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)


@router.message(ManageService.choosing_action, F.text == "üóë –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É")
async def start_delete_service(message: types.Message, state: FSMContext):
    services = load_json(JSON_PATH)
    if not services:
        return await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç.")

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=item["title"])] for item in services]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await state.set_state(DeleteService.waiting_for_selection)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.message(DeleteService.waiting_for_selection)
async def delete_service_by_title(message: types.Message, state: FSMContext):
    title = message.text.strip()
    services = load_json(JSON_PATH)
    new_services = []
    found = False

    for svc in services:
        if svc["title"] == title:
            for file in svc.get("media", []):
                try:
                    os.remove(os.path.join(MEDIA_PATH, file))
                except FileNotFoundError:
                    pass
            found = True
        else:
            new_services.append(svc)

    if not found:
        return await message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    save_json(JSON_PATH, new_services)
    await message.answer("üóë –£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞")

    # –ü—Ä–µ–¥–ª–æ–∂–∏–º —É–¥–∞–ª–∏—Ç—å –µ—â—ë –æ–¥–Ω—É
    services = new_services
    if not services:
        await state.set_state(ManageService.choosing_action)
        return await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç.", reply_markup=back_menu)

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=item["title"])] for item in services]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await message.answer("–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ—â—ë –æ–¥–Ω—É? –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=keyboard)


@router.message(EditService.waiting_for_choice)
async def ask_new_description(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(EditService.editing_desc)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_menu
    )


@router.message(EditService.editing_desc)
async def process_new_description(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(desc=text)

    services = load_json(JSON_PATH)
    data = await state.get_data()
    service = next((s for s in services if s["title"] == data["title"]), None)
    if not service:
        return await message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    media = service.get("media", [])
    if not media:
        await state.update_data(media=[])
        await state.set_state(EditService.adding_media)
        return await message.answer(
            "–ù–µ—Ç –º–µ–¥–∏–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'", reply_markup=back_menu
        )

    # –ü—Ä–µ–≤—å—é –º–µ–¥–∏–∞
    for idx, file in enumerate(media, 1):
        full_path = os.path.join(MEDIA_PATH, file)
        if os.path.exists(full_path):
            if file.endswith(".mp4"):
                await message.answer_video(
                    types.FSInputFile(full_path), caption=f"{idx}. {file}"
                )
            else:
                await message.answer_photo(
                    types.FSInputFile(full_path), caption=f"{idx}. {file}"
                )

    await state.update_data(media=media)
    await state.set_state(EditService.deleting_media)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–µ–¥–∏–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –∏–ª–∏ '–û—Ç–º–µ–Ω–∏—Ç—å':",
        reply_markup=back_menu,
    )


@router.message(EditService.deleting_media)
async def delete_selected_media(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()
    data = await state.get_data()
    current_media = data.get("media", [])

    if text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.set_state(EditService.adding_media)
        return await message.answer(
            "–û–∫. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –º–µ–¥–∏–∞ –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'", reply_markup=back_menu
        )

    if text == "–æ—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        return await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=back_menu)

    try:
        indexes = [int(i.strip()) - 1 for i in text.split(",")]
        if any(i < 0 or i >= len(current_media) for i in indexes):
            raise IndexError
    except (ValueError, IndexError):
        return await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: 1, 3"
        )

    new_media = []
    for i, file in enumerate(current_media):
        if i not in indexes:
            new_media.append(file)
        else:
            try:
                os.remove(os.path.join(MEDIA_PATH, file))
            except FileNotFoundError:
                pass

    await state.update_data(media=new_media)

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    if new_media:
        for idx, file in enumerate(new_media, 1):
            full_path = os.path.join(MEDIA_PATH, file)
            if os.path.exists(full_path):
                if file.endswith(".mp4"):
                    await message.answer_video(
                        types.FSInputFile(full_path), caption=f"{idx}. {file}"
                    )
                else:
                    await message.answer_photo(
                        types.FSInputFile(full_path), caption=f"{idx}. {file}"
                    )

        await message.answer(
            "–£–¥–∞–ª–∏—Ç—å –µ—â—ë? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_menu
        )
    else:
        await message.answer(
            "–ú–µ–¥–∏–∞ –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤—ã—Ö.",
            reply_markup=back_menu,
        )
        await state.set_state(EditService.adding_media)


@router.message(EditService.adding_media, F.content_type.in_(["photo", "video"]))
async def collect_new_media(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id if message.photo else message.video.file_id
    is_video = bool(message.video)
    filename = await save_media_file(message.bot, file_id, MEDIA_PATH, is_video)
    data = await state.get_data()
    media = data.get("media", [])
    media.append(filename)
    await state.update_data(media=media)
    await message.answer("üìé –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ï—â—ë –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'")


@router.message(EditService.adding_media, F.text.lower() == "–≥–æ—Ç–æ–≤–æ")
async def save_service_changes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    services = load_json(JSON_PATH)

    for svc in services:
        if svc["title"] == data["title"]:
            if "desc" in data:
                svc["desc"] = data["desc"]
            if "media" in data:
                svc["media"] = data["media"]
            break

    save_json(JSON_PATH, services)
    await state.set_state(ManageService.choosing_action)
    await message.answer("‚úèÔ∏è –£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
