from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
import os
from config import DATA_DIR, MEDIA_DIR, SECTIONS
from handlers.admin.base_crud import load_json, save_json
from keyboards.main_menu import back_menu
from .announcements_admin_states import DeleteAnnouncement, ManageAnnouncements

router = Router()

SECTION_TITLE = "üì∞ –ê–Ω–æ–Ω—Å—ã"
SECTION_KEY = SECTIONS[SECTION_TITLE]
JSON_PATH = os.path.join(DATA_DIR, f"{SECTION_KEY}.json")
MEDIA_PATH = os.path.join(MEDIA_DIR, SECTION_KEY)


def delete_media_files(filenames: list[str]):
    deleted = 0
    for file in filenames:
        path = os.path.join(MEDIA_PATH, file)
        if os.path.exists(path):
            try:
                os.remove(path)
                deleted += 1
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")
        else:
            print(f"[WARNING] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    print(f"[INFO] –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted}")


@router.message(ManageAnnouncements.choosing_action, F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–æ–Ω—Å")
async def start_delete(message: types.Message, state: FSMContext):
    items = load_json(JSON_PATH)
    if not items:
        return await message.answer("–°–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ –ø—É—Å—Ç.")
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=item["title"])] for item in items]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await state.set_state(DeleteAnnouncement.waiting_for_selection)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–æ–Ω—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ üîô –ù–∞–∑–∞–¥):", reply_markup=keyboard
    )


@router.message(DeleteAnnouncement.waiting_for_selection)
async def delete_announcement(message: types.Message, state: FSMContext):
    title = message.text.strip()

    if title == "üîô –ù–∞–∑–∞–¥" or title.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.set_state(ManageAnnouncements.choosing_action)
        return await message.answer("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=back_menu)

    items = load_json(JSON_PATH)
    new_items = []
    found = False
    for item in items:
        if item["title"] == title:
            delete_media_files(item.get("media", []))
            found = True
        else:
            new_items.append(item)

    if not found:
        return await message.answer(
            "‚ùå –ê–Ω–æ–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ 'üîô –ù–∞–∑–∞–¥'."
        )

    save_json(JSON_PATH, new_items)

    items = new_items
    if not items:
        await state.set_state(ManageAnnouncements.choosing_action)
        return await message.answer(
            "üóë –ê–Ω–æ–Ω—Å —É–¥–∞–ª—ë–Ω. –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=back_menu
        )

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=item["title"])] for item in items]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await message.answer(
        "üóë –ê–Ω–æ–Ω—Å —É–¥–∞–ª—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 'üîô –ù–∞–∑–∞–¥':",
        reply_markup=keyboard,
    )
