from aiogram import Router, F, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import os
from config import DATA_DIR, MEDIA_DIR, ADMINS
from handlers.admin.base_crud import load_json, save_json, save_media_file
from filters.is_admin import IsAdmin
from keyboards.main_menu import back_menu

router = Router()
router.message.filter(IsAdmin())

SECTION_KEY = "–æ–Ω–ª–∞–π–Ω—ç–∫—Å–∫—É—Ä—Å–∏–∏"
JSON_PATH = os.path.join(DATA_DIR, f"{SECTION_KEY}.json")
MEDIA_PATH = os.path.join(MEDIA_DIR, SECTION_KEY)


class AddTour(StatesGroup):
    waiting_for_desc = State()
    waiting_for_media = State()


class EditTour(StatesGroup):
    waiting_for_selection = State()
    waiting_for_desc = State()
    waiting_for_media = State()


class DeleteTour(StatesGroup):
    waiting_for_selection = State()


@router.message(F.text == "/admin_online")
async def admin_online_menu(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    await state.clear()
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é")],
            [types.KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é")],
            [types.KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
    )
    await message.answer("üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω-—ç–∫—Å–∫—É—Ä—Å–∏—è–º–∏:", reply_markup=keyboard)


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é")
async def start_add_tour(message: types.Message, state: FSMContext):
    await state.set_state(AddTour.waiting_for_desc)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏:", reply_markup=back_menu)


@router.message(AddTour.waiting_for_desc)
async def get_tour_description(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text.strip())
    await state.set_state(AddTour.waiting_for_media)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=back_menu,
    )


@router.message(AddTour.waiting_for_media, F.content_type.in_(["photo", "video"]))
async def collect_tour_media(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id if message.photo else message.video.file_id
    is_video = bool(message.video)
    filename = await save_media_file(message.bot, file_id, MEDIA_PATH, is_video)
    media = (await state.get_data()).get("media", [])
    media.append(filename)
    await state.update_data(media=media)
    await message.answer("üìé –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'")


@router.message(AddTour.waiting_for_media, F.text.lower() == "–≥–æ—Ç–æ–≤–æ")
async def save_new_tour(message: types.Message, state: FSMContext):
    data = await state.get_data()
    desc = data["desc"]
    media = data.get("media", [])
    blocks = load_json(JSON_PATH)
    blocks.append({"desc": desc, "media": media})
    save_json(JSON_PATH, blocks)
    await state.clear()
    await message.answer("‚úÖ –≠–∫—Å–∫—É—Ä—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")


@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é")
async def start_delete_tour(message: types.Message, state: FSMContext):
    blocks = load_json(JSON_PATH)
    if not blocks:
        return await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=f"{i+1}: {b['desc'][:30]}")]
            for i, b in enumerate(blocks)
        ]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await state.set_state(DeleteTour.waiting_for_selection)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–∫—É—Ä—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.message(DeleteTour.waiting_for_selection, F.text.regexp(r"^\d+:"))
async def delete_selected_tour(message: types.Message, state: FSMContext):
    idx = int(message.text.split(":")[0]) - 1
    blocks = load_json(JSON_PATH)
    if 0 <= idx < len(blocks):
        del blocks[idx]
        save_json(JSON_PATH, blocks)
        await message.answer("üóë –≠–∫—Å–∫—É—Ä—Å–∏—è —É–¥–∞–ª–µ–Ω–∞")
    await state.clear()


@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é")
async def start_edit_tour(message: types.Message, state: FSMContext):
    blocks = load_json(JSON_PATH)
    if not blocks:
        return await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=f"{i+1}: {b['desc'][:30]}")]
            for i, b in enumerate(blocks)
        ]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await state.set_state(EditTour.waiting_for_selection)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–∫—É—Ä—Å–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard
    )


@router.message(EditTour.waiting_for_selection, F.text.regexp(r"^\d+:"))
async def edit_tour_desc(message: types.Message, state: FSMContext):
    idx = int(message.text.split(":")[0]) - 1
    await state.update_data(index=idx)
    await state.set_state(EditTour.waiting_for_desc)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=back_menu)


@router.message(EditTour.waiting_for_desc)
async def edit_tour_media_prompt(message: types.Message, state: FSMContext):
    await state.update_data(desc=message.text.strip())
    await state.set_state(EditTour.waiting_for_media)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –º–µ–¥–∏–∞ –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'", reply_markup=back_menu)


@router.message(EditTour.waiting_for_media, F.content_type.in_(["photo", "video"]))
async def collect_edit_tour_media(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id if message.photo else message.video.file_id
    is_video = bool(message.video)
    filename = await save_media_file(message.bot, file_id, MEDIA_PATH, is_video)
    media = (await state.get_data()).get("media", [])
    media.append(filename)
    await state.update_data(media=media)
    await message.answer("üìé –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'")


@router.message(EditTour.waiting_for_media, F.text.lower() == "–≥–æ—Ç–æ–≤–æ")
async def save_edited_tour(message: types.Message, state: FSMContext):
    data = await state.get_data()
    idx = data["index"]
    blocks = load_json(JSON_PATH)
    if 0 <= idx < len(blocks):
        blocks[idx] = {"desc": data["desc"], "media": data.get("media", [])}
        save_json(JSON_PATH, blocks)
        await message.answer("‚úèÔ∏è –≠–∫—Å–∫—É—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    await state.clear()
