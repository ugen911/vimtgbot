from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
import os
from config import DATA_DIR, MEDIA_DIR, SECTIONS
from handlers.admin.base_crud import load_json, save_json
from keyboards.main_menu import back_menu
from .services_admin_states import DeleteService, ManageService

router = Router()

SECTION_TITLE = "üìö –£—Å–ª—É–≥–∏"
SECTION_KEY = SECTIONS[SECTION_TITLE]
JSON_PATH = os.path.join(DATA_DIR, f"{SECTION_KEY}.json")
MEDIA_PATH = os.path.join(MEDIA_DIR, SECTION_KEY)


@router.message(ManageService.choosing_action, F.text == "üóë –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É")
async def start_delete_service(message: types.Message, state: FSMContext):
    services = load_json(JSON_PATH)
    if not services:
        return await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç.")

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=item["title"])] for item in services]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await state.set_state(DeleteService.waiting_for_selection)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.message(DeleteService.waiting_for_selection)
async def delete_service_by_title(message: types.Message, state: FSMContext):
    title = message.text.strip()
    services = load_json(JSON_PATH)
    new_services = []
    found = False

    for svc in services:
        if svc["title"] == title:
            for file in svc.get("media", []):
                try:
                    os.remove(os.path.join(MEDIA_PATH, file))
                except FileNotFoundError:
                    pass
            found = True
        else:
            new_services.append(svc)

    if not found:
        return await message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    save_json(JSON_PATH, new_services)
    await message.answer("üóë –£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞")

    if not new_services:
        await state.set_state(ManageService.choosing_action)
        return await message.answer("–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç.", reply_markup=back_menu)

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=item["title"])] for item in new_services]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await message.answer("–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ—â—ë –æ–¥–Ω—É? –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=keyboard)
