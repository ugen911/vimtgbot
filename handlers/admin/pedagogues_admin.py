from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile
import os
from config import DATA_DIR, MEDIA_DIR, ADMINS
from handlers.admin.base_crud import load_json, save_json, save_media_file
from filters.is_admin import IsAdmin
from keyboards.main_menu import back_menu

router = Router()
router.message.filter(IsAdmin())

JSON_PATH = os.path.join(DATA_DIR, "pedagogues.json")
MEDIA_PATH = os.path.join(MEDIA_DIR, "–ø–µ–¥–∞–≥–æ–≥–∏")


class EditPedagogue(StatesGroup):
    waiting_for_role = State()
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_media = State()
    waiting_for_new_name = State()
    waiting_for_new_role = State()


class ManagePedagogue(StatesGroup):
    choosing_role = State()
    choosing_action = State()
    choosing_name = State()
    editing_name = State()
    editing_role = State()
    editing_description = State()
    editing_media = State()
    deleting_media = State()


@router.message(F.text == "/admin_pedagogues")
async def admin_pedagogues_menu(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    await state.clear()
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üë©‚Äçüè´ –í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏")],
            [types.KeyboardButton(text="üéì –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await state.set_state(ManagePedagogue.choosing_role)


@router.message(
    ManagePedagogue.choosing_role, F.text.in_(["üë©‚Äçüè´ –í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏", "üéì –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"])
)
async def ask_action_for_role(message: types.Message, state: FSMContext):
    role = "–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏" if "–í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–∏" in message.text else "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"
    await state.update_data(role=role)
    await state.set_state(ManagePedagogue.choosing_action)

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ–¥–∞–≥–æ–≥–∞")],
            [types.KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ–¥–∞–≥–æ–≥–∞")],
            [types.KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–µ–¥–∞–≥–æ–≥–∞")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True,
    )
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard
    )


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ–¥–∞–≥–æ–≥–∞ ===
@router.message(ManagePedagogue.choosing_action, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ–¥–∞–≥–æ–≥–∞")
async def start_add_pedagogue(message: types.Message, state: FSMContext):
    await state.set_state(EditPedagogue.waiting_for_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ–¥–∞–≥–æ–≥–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_menu
    )


@router.message(EditPedagogue.waiting_for_name)
async def add_pedagogue_name(message: types.Message, state: FSMContext):
    if message.text.strip().lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(name=message.text.strip())
    else:
        await state.update_data(name="–ë–µ–∑ –∏–º–µ–Ω–∏")
    await state.set_state(EditPedagogue.waiting_for_role)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å (—Ä–æ–ª—å) –ø–µ–¥–∞–≥–æ–≥–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=back_menu,
    )


@router.message(EditPedagogue.waiting_for_role)
async def add_pedagogue_role(message: types.Message, state: FSMContext):
    if message.text.strip().lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(role_title=message.text.strip())
    else:
        await state.update_data(role_title="–ü–µ–¥–∞–≥–æ–≥")
    await state.set_state(EditPedagogue.waiting_for_description)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ–¥–∞–≥–æ–≥–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_menu
    )


@router.message(EditPedagogue.waiting_for_description)
async def add_pedagogue_description(message: types.Message, state: FSMContext):
    if message.text.strip().lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(description=message.text.strip())
    else:
        await state.update_data(description="")
    await state.update_data(media=[])
    await state.set_state(EditPedagogue.waiting_for_media)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'", reply_markup=back_menu
    )


@router.message(
    ManagePedagogue.choosing_action,
    F.text.in_(["‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ–¥–∞–≥–æ–≥–∞", "üóë –£–¥–∞–ª–∏—Ç—å –ø–µ–¥–∞–≥–æ–≥–∞"]),
)
async def choose_pedagogue_for_edit_or_delete(
    message: types.Message, state: FSMContext
):
    action = message.text
    data = await state.get_data()
    role = data["role"]
    await state.update_data(action=action)
    all_data = load_json(JSON_PATH)
    names = [p["name"] for p in all_data.get(role, [])]

    if not names:
        return await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=name)] for name in names]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await state.set_state(ManagePedagogue.choosing_name)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è:", reply_markup=keyboard)


@router.message(ManagePedagogue.choosing_name)
async def handle_pedagogue_action(message: types.Message, state: FSMContext):
    data = await state.get_data()
    role = data["role"]
    name = message.text.strip()
    all_data = load_json(JSON_PATH)
    index = next((i for i, p in enumerate(all_data[role]) if p["name"] == name), -1)

    if index == -1:
        return await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")

    await state.update_data(name=name, index=index)

    if data["action"] == "üóë –£–¥–∞–ª–∏—Ç—å –ø–µ–¥–∞–≥–æ–≥–∞":
        for file in all_data[role][index].get("media", []):
            try:
                os.remove(os.path.join(MEDIA_PATH, role, file))
            except FileNotFoundError:
                pass
        del all_data[role][index]
        save_json(JSON_PATH, all_data)
        await state.set_state(ManagePedagogue.choosing_action)
        return await message.answer("üóë –£–¥–∞–ª–µ–Ω–æ")

    # === –Ω–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_menu
    )
    await state.set_state(ManagePedagogue.editing_name)


@router.message(ManagePedagogue.editing_name)
async def edit_name(message: types.Message, state: FSMContext):
    if message.text.strip().lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(new_name=message.text.strip())
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_menu
    )
    await state.set_state(ManagePedagogue.editing_role)


@router.message(ManagePedagogue.editing_role)
async def edit_role(message: types.Message, state: FSMContext):
    if message.text.strip().lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(new_role=message.text.strip())
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_menu
    )
    await state.set_state(ManagePedagogue.editing_description)


@router.message(ManagePedagogue.editing_description)
async def edit_description(message: types.Message, state: FSMContext):
    if message.text.strip().lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(description=message.text.strip())
    data = await state.get_data()
    all_data = load_json(JSON_PATH)
    current_media = all_data[data["role"]][data["index"]].get("media", [])

    if not current_media:
        await state.update_data(media=[])
        await message.answer(
            "–ù–µ—Ç –º–µ–¥–∏–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'", reply_markup=back_menu
        )
        return await state.set_state(ManagePedagogue.editing_media)

    for idx, file in enumerate(current_media, 1):
        file_path = os.path.join(MEDIA_PATH, data["role"], file)
        if os.path.exists(file_path):
            if file.endswith(".mp4"):
                await message.answer_video(
                    FSInputFile(file_path), caption=f"{idx}. {file}"
                )
            else:
                await message.answer_photo(
                    FSInputFile(file_path), caption=f"{idx}. {file}"
                )

    await state.set_state(ManagePedagogue.deleting_media)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–µ–¥–∏–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=back_menu,
    )


@router.message(ManagePedagogue.deleting_media)
async def delete_selected_media(message: types.Message, state: FSMContext):
    data = await state.get_data()
    all_data = load_json(JSON_PATH)
    media = all_data[data["role"]][data["index"]].get("media", [])

    if message.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(media=media)
        await state.set_state(ManagePedagogue.editing_media)
        return await message.answer(
            "–•–æ—Ä–æ—à–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –º–µ–¥–∏–∞ –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'", reply_markup=back_menu
        )

    try:
        indexes = [int(i.strip()) - 1 for i in message.text.split(",")]
    except ValueError:
        return await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
        )

    new_media = []
    for i, file in enumerate(media):
        if i not in indexes:
            new_media.append(file)
        else:
            try:
                os.remove(os.path.join(MEDIA_PATH, data["role"], file))
            except FileNotFoundError:
                pass

    await state.update_data(media=new_media)
    await state.set_state(ManagePedagogue.editing_media)
    await message.answer(
        "üóë –£–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=back_menu,
    )


@router.message(ManagePedagogue.editing_media, F.content_type.in_(["photo", "video"]))
async def collect_edit_media(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id if message.photo else message.video.file_id
    is_video = bool(message.video)
    data = await state.get_data()
    media_path = os.path.join(MEDIA_PATH, data["role"])
    filename = await save_media_file(
        message.bot, file_id, media_path, is_video=is_video
    )
    media = data.get("media", [])
    media.append(filename)
    await state.update_data(media=media)
    await message.answer("üìé –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ï—â—ë –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'")


@router.message(ManagePedagogue.editing_media, F.text.lower() == "–≥–æ—Ç–æ–≤–æ")
async def finish_editing(message: types.Message, state: FSMContext):
    data = await state.get_data()
    all_data = load_json(JSON_PATH)
    record = all_data[data["role"]][data["index"]]

    if "new_name" in data:
        record["name"] = data["new_name"]
    if "new_role" in data:
        record["role"] = data["new_role"]
    if "description" in data:
        record["description"] = data["description"]
    if "media" in data:
        record["media"] = data["media"]

    save_json(JSON_PATH, all_data)
    await state.set_state(ManagePedagogue.choosing_action)
    await message.answer("‚úèÔ∏è –î–∞–Ω–Ω—ã–µ –ø–µ–¥–∞–≥–æ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
