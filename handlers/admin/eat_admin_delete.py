from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
import os
from config import DATA_DIR, MEDIA_DIR
from handlers.admin.base_crud import load_json, save_json
from keyboards.main_menu import back_menu
from .eat_admin_states import DeleteMenu, ManageMenu

router = Router()

SECTION_TITLE = "üçΩ –ú–µ–Ω—é"
SECTION_KEY = "menu"
JSON_PATH = os.path.join(DATA_DIR, f"{SECTION_KEY}.json")
MEDIA_PATH = os.path.join(MEDIA_DIR, SECTION_KEY)


@router.message(ManageMenu.choosing_action, F.text == "üóë –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—é")
async def start_delete_menu(message: types.Message, state: FSMContext):
    data = load_json(JSON_PATH)

    # üõ°Ô∏è –ó–∞—â–∏—Ç–∞
    if isinstance(data, list):
        data = {"menu_items": data}
    elif not isinstance(data, dict):
        data = {"menu_items": []}

    items = data.get("menu_items", [])
    if not items:
        return await message.answer("–ú–µ–Ω—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=item["description"])] for item in items]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await state.set_state(DeleteMenu.waiting_for_selection)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.message(DeleteMenu.waiting_for_selection)
async def delete_menu_block(message: types.Message, state: FSMContext):
    desc = message.text.strip()
    if desc == "üîô –ù–∞–∑–∞–¥" or desc.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.set_state(ManageMenu.choosing_action)
        return await message.answer("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=back_menu)

    data = load_json(JSON_PATH)

    # üõ°Ô∏è –ó–∞—â–∏—Ç–∞
    if isinstance(data, list):
        data = {"menu_items": data}
    elif not isinstance(data, dict):
        data = {"menu_items": []}

    blocks = data.get("menu_items", [])
    new_blocks = []
    found = False

    for block in blocks:
        if block["description"] == desc:
            for file in block.get("media", []):
                try:
                    os.remove(os.path.join(MEDIA_PATH, file))
                except FileNotFoundError:
                    pass
            found = True
        else:
            new_blocks.append(block)

    if not found:
        return await message.answer("‚ùå –ë–ª–æ–∫ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    data["menu_items"] = new_blocks
    save_json(JSON_PATH, data)

    if not new_blocks:
        await state.set_state(ManageMenu.choosing_action)
        return await message.answer(
            "üóë –ë–ª–æ–∫ —É–¥–∞–ª—ë–Ω. –ú–µ–Ω—é —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–æ–µ.", reply_markup=back_menu
        )

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=item["description"])] for item in new_blocks
        ]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await message.answer(
        "üóë –ë–ª–æ–∫ —É–¥–∞–ª—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ 'üîô –ù–∞–∑–∞–¥':", reply_markup=keyboard
    )
