from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
import os
from config import DATA_DIR, MEDIA_DIR
from handlers.admin.base_crud import load_json, save_json
from keyboards.main_menu import back_menu
from .schedule_admin_states import ManageSchedule

router = Router()

JSON_PATH = os.path.join(DATA_DIR, "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.json")
MEDIA_ROOT = os.path.join(MEDIA_DIR, "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")


def delete_media_files(filenames: list[str], group: str):
    media_path = os.path.join(MEDIA_ROOT, group)
    deleted = 0
    for file in filenames:
        path = os.path.join(media_path, file)
        if os.path.exists(path):
            try:
                os.remove(path)
                deleted += 1
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")
        else:
            print(f"[WARNING] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
    print(f"[INFO] –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted} (–≥—Ä—É–ø–ø–∞: {group})")


@router.message(ManageSchedule.choosing_action, F.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def choose_block_to_delete(message: types.Message, state: FSMContext):
    data = await state.get_data()
    group = data["group"]
    blocks = load_json(JSON_PATH).get(group, [])

    if not blocks:
        return await message.answer("üì≠ –ë–ª–æ–∫–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.")

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=f"{i+1}: {b['desc'][:30]}")]
            for i, b in enumerate(blocks)
        ]
        + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )
    await state.set_state(ManageSchedule.choosing_block_to_delete)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 'üîô –ù–∞–∑–∞–¥':", reply_markup=keyboard
    )


@router.message(ManageSchedule.choosing_block_to_delete)
async def process_block_deletion(message: types.Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    group = data["group"]

    if text.lower() in ["üîô –Ω–∞–∑–∞–¥", "–æ—Ç–º–µ–Ω–∞"]:
        await state.set_state(ManageSchedule.choosing_action)
        return await message.answer(
            "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π.", reply_markup=back_menu
        )

    if not text or ":" not in text or not text.split(":")[0].isdigit():
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

    index = int(text.split(":")[0]) - 1
    schedule = load_json(JSON_PATH)

    if not (0 <= index < len(schedule[group])):
        return await message.answer("‚ùå –ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    delete_media_files(schedule[group][index].get("media", []), group)
    del schedule[group][index]
    save_json(JSON_PATH, schedule)

    updated_blocks = schedule.get(group, [])
    if updated_blocks:
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text=f"{i+1}: {b['desc'][:30]}")]
                for i, b in enumerate(updated_blocks)
            ]
            + [[types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
            resize_keyboard=True,
        )
        await message.answer(
            "üóë –ë–ª–æ–∫ —É–¥–∞–ª—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 'üîô –ù–∞–∑–∞–¥':",
            reply_markup=keyboard,
        )
        return

    await state.set_state(ManageSchedule.choosing_action)
    await message.answer("üóë –í—Å–µ –±–ª–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=back_menu)
